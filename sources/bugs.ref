; Copyright 2016 Richard Dymond (rjdymond@gmail.com)

[Bug:noStepForward:No step forward]
Consider this PRINT command:

<code>PRINT "12";CHR$ 9;"34"</code>

You might, because of the cursor-right control character (CHR$ 9) between "12"
and "34", expect it to print:

<code>12 34</code>

But in fact it prints:

<code>1234</code>

The reason is that the routine at #R$0A3D, which is responsible for handling
CHR$ 9, does not update the print position after printing a transparent space,
and so effectively prints nothing at all.

[Bug:noStepBack:No step back]
Consider the following PRINT commands:

<div><code>PRINT 1</code></div>
<div><code>PRINT CHR$ 8;2</code></div>
<div><code>PRINT CHR$ 8;3</code></div>

They should print '2' at the right end of the top line of the display - because
of the cursor-left character (CHR$ 8) before the '2' - but instead the '2' is
printed at the beginning of the second line, as if the CHR$ 8 were not there.
However, the '3' is (correctly) printed at the right end of the second line.

The reason is that the instruction at #R$0A32 is 'LD A,#N$18,,,1($)' instead of
'LD A,#N$19,,,1($)', which prevents CHR$ 8 from moving the print position up to
the top line of the display.

[Bug:str$AndSmallNumbers:STR$ and small numbers]
Because of a bug in the handling of the calculator stack at #R$2E24, a binary
expression with STR$ on the right hand side is evaluated as if its left hand
side is empty. For example:

<code>PRINT "2"+STR$ 0.5</code>

prints '0.5' instead of '20.5'.

Note that the bug is triggered only if the argument of STR$ is a non-zero
number strictly between -1 and 1.
