; Copyright 2016 Richard Dymond (rjdymond@gmail.com)

[Bug:noStepForward:No step forward]
Consider this PRINT command:

<code>PRINT "12";CHR$ 9;"34"</code>

You might, because of the cursor-right control character (CHR$ 9) between "12"
and "34", expect it to print:

<code>12 34</code>

But in fact it prints:

<code>1234</code>

The reason is that the routine at #R$0A3D, which is responsible for handling
CHR$ 9, does not update the print position after printing a transparent space,
and so effectively prints nothing at all.

[Bug:noStepBack:No step back]
Consider the following PRINT commands:

<div><code>PRINT 1</code></div>
<div><code>PRINT CHR$ 8;2</code></div>
<div><code>PRINT CHR$ 8;3</code></div>

They should print '2' at the right end of the top line of the display - because
of the cursor-left character (CHR$ 8) before the '2' - but instead the '2' is
printed at the beginning of the second line, as if the CHR$ 8 were not there.
However, the '3' is (correctly) printed at the right end of the second line.

The reason is that the instruction at #R$0A32 is 'LD A,#n$18' instead of
'LD A,#n$19', which prevents CHR$ 8 from moving the print position up to the
top line of the display.

[Bug:str$AndSmallNumbers:STR$ and small numbers]
Because of a bug in the handling of the calculator stack at #R$2E24, a binary
expression with STR$ on the right hand side is evaluated as if its left hand
side is empty. For example:

<code>PRINT "2"+STR$ 0.5</code>

prints '0.5' instead of '20.5'.

Note that the bug is triggered only if the argument of STR$ is a non-zero
number strictly between -1 and 1.

[Bug:dontCloseTheStreams:Don't close the streams]
It can be dangerous to close a stream, especially if it's aleady been closed or
was never opened. For example, on a freshly booted Spectrum:

<code>CLOSE #4</code>

makes the computer hang.

The root cause is that there is no end marker in the #R$1716(close stream
lookup table). This makes the 'JP (HL)' at the end of the routine at #R$1701
jump to #R$175B, and the 'RET' that follows at #N$175C causes an indirect jump
to #N$5C1E (an address pushed onto the stack earlier at
#R$1701#$1701(#N$1701)). After proceeding through the RAM at #N$5C1E onwards,
and disabling interrupts along the way, the Spectrum finally hangs on the
'HALT' instruction at #R$1303.

If there were an end marker (#n$00) in the close stream lookup table, the
'JP (HL)' at the end of the routine at #R$1701 would jump to #R$171C, the 'RET'
that follows at #N$171D would return to #R$16EB, and the stream would be closed
successfully.

[Bug:anythingEqualsSCREEN$xy:Anything equals SCREEN$ (x,y)]
Some care is needed when using SCREEN$, because it doesn't always work as you
would expect. For example:

<code>IF ""=SCREEN$ (0,0) THEN PRINT "?"</code>

will print "?" no matter what is on the screen at (0,0) at the time.

The reason is that the routine at #R$2535 exits via #R$2AB2, which results in
the character found at (0,0) being stored on the calculator stack twice instead
of just once. So when the '=' operation above is performed, the last two items
on the stack - the two copies of SCREEN$ (0,0) - are equal, and the result of
the operation is always true, regardless of what's on the left hand side of the
equation.

Note that the calculator stack is cleared before each statement of a BASIC
program (or the edit line) is executed, so the bug is confined to the statement
that contains SCREEN$, and will not affect any other statements.

[Bug:34thBitOfDivision:The 34th bit of division]
In the division loop at #R$31D2, the 34th bit of the quotient is always set to
0, meaning that some results - such as 1/10 and 1/1000 - are not rounded up as
they should be. For example:

<code>PRINT 1/2-.5</code>

prints '2.3283064E-10' instead of '0', because while '1/2' is calculated
correctly, '.5' is evaluated as '5 * 1/10', which is not calculated correctly.
Specifically, '1/10' is represented as 7D 4C CC CC CC (0.0999999999767) in
floating point form, but if the 34th bit were included, it would be rounded up
to 7D 4C CC CC CD (0.100000000006), which is more accurate.

The problem is caused by the jump at #R$31FF, which should be to #R$31DB
instead of #R$31E2.

[Bug:troubleWith-65536:The trouble with -65536]
In some circumstances, the number -65536 is stored in short form instead of
full floating point form, which causes problems. For example:

<code>PRINT -65535-1</code>

prints '-1E-38', and:

<code>PRINT INT -65536</code>

prints '-1'.

The first of these problems is caused by the routine at #R$3014, which fails to
detect an overflow when adding two small negative integers whose sum is -65536.
Specifically, when #R$302B is reached, the carry flag is set, #REGa holds
#n$FF (the sign byte of the second number), and #REG[(HL)] also holds #n$FF
(the sign byte of the first number). Then:

#TABLE(asm,address-1,instruction,comment-11)
{ #N$302B | ADC A,(HL)    | #REGa=#n$FF (#n$FF+#n$FF+carry). }
{ #N$302C | RRCA          | #REGa=#n$FF, carry flag set. }
{ #N$302D | ADC A,#n$00   | #REGa=#n$00. }
{ #N$302F | JR NZ,#R$303C | This jump is not made. }
TABLE#

The result is then stored as 00 FF 00 00 00, which other ROM routines do not
always handle correctly.

The second problem is caused by the routine at #R$3214. Specifically, the
section of code at #R$3225 checks whether the argument <i>x</i> satisfies
-65537&lt;<i>x</i>&lt;=-65536; if it does, its floating point form is
(erroneously) modified to 00 FF 00 00 00. (-65537 in floating point form is
91 80 00 80 00, which explains why the mask 0x80 is used when testing the
fourth byte of <i>x</i> at #R$3230.)
